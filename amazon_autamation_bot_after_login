from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

# Hardcoded credentials for debugging (REMOVE before deployment)
AMAZON_EMAIL = "email_ID"
AMAZON_PASSWORD = "password"

# Initialize WebDriver
driver = webdriver.Chrome()

try:
    # Step 1: Open Amazon homepage
    driver.get("https://www.amazon.in/")
    driver.maximize_window()
    print(" Opened Amazon homepage.")

    # Step 2: Click on "Sign in" button
    try:
        sign_in_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "nav-link-accountList"))
        )
        sign_in_button.click()
        print("‚úÖ Clicked on Sign-in button.")
    except Exception as e:
        print("üö® Error clicking Sign-in button:", e)
        driver.quit()
        exit()

    # Step 3: Enter email
    try:
        email_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "ap_email"))
        )
        email_input.send_keys(AMAZON_EMAIL)
        email_input.send_keys(Keys.RETURN)
        print("‚úÖ Entered email and clicked Next.")
    except Exception as e:
        print("üö® Error entering email:", e)
        driver.quit()
        exit()

    # Step 4: CAPTCHA Handling
    try:
        captcha_element = WebDriverWait(driver, 3).until(
            EC.presence_of_element_located((By.ID, "captchacharacters"))
        )
        input(" CAPTCHA detected! Solve it manually, then press Enter to continue...")
    except:
        print("No CAPTCHA detected, proceeding...")

    # Step 5: Enter password
    try:
        password_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "ap_password"))
        )
        password_input.send_keys(AMAZON_PASSWORD)
        password_input.send_keys(Keys.RETURN)
        print("‚úÖ Entered password and clicked Login.")
    except Exception as e:
        print("üö® Error entering password:", e)
        driver.quit()
        exit()

    # Step 6: Check if OTP is required
    try:
        otp_input = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.ID, "auth-mfa-otpcode"))
        )
        otp_code = input("üîí Enter the OTP received on your phone/email: ")
        otp_input.send_keys(otp_code)
        otp_input.send_keys(Keys.RETURN)
        print("‚úÖ OTP entered successfully.")
    except:
        print("‚úÖ No OTP required, proceeding...")

    # Step 7: Verify successful login
    try:
        account_name = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "nav-link-accountList-nav-line-1"))
        ).text
        print(f"‚úÖ Successfully logged in as: {account_name}")
    except:
        print("‚ùå Login failed! Please check your credentials.")
        driver.quit()
        exit()

    # Step 8: Search for "iPhone"
    try:
        search_box = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "twotabsearchtextbox"))
        )
        search_box.send_keys("iPhone")
        search_box.send_keys(Keys.RETURN)
        print("‚úÖ Searched for 'iPhone'.")
    except Exception as e:
        print("üö® Error searching for product:", e)
        driver.quit()
        exit()

    # Step 9: Wait for search results & select first product
    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "div.s-main-slot"))
        )
        first_product = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "div[data-component-type='s-search-result'] h2 a"))
        )
        driver.execute_script("arguments[0].scrollIntoView();", first_product)  # Scroll into view
        time.sleep(2)  # Short delay to let the page stabilize
        first_product.click()
        print("‚úÖ Selected the first product.")
    except Exception as e:
        print("üö® Error selecting the first product:", e)
        driver.quit()
        exit()

    # Step 10: Extract product details
    try:
        product_title = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "productTitle"))
        ).text

        try:
            product_price = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "span.a-price span.a-offscreen"))
            ).text
        except:
            product_price = "Price not available"

        print(f"üìå Product Title: {product_title}")
        print(f"üí∞ Product Price: {product_price}")
    except Exception as e:
        print("üö® Error extracting product details:", e)

    # Step 11: Add to cart
    try:
        add_to_cart_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "add-to-cart-button"))
        )
        add_to_cart_button.click()
        print("‚úÖ Added product to the cart.")
    except Exception as e:
        print("üö® Error adding to cart:", e)
        driver.quit()
        exit()

    # Step 12: Validate cart
    try:
        cart_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "nav-cart"))
        )
        cart_button.click()
        print("‚úÖ Opened the cart.")

        cart_product_title = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "span.sc-product-title"))
        ).text

        if product_title[:30] in cart_product_title:  # Partial match validation
            print("‚úÖ Product successfully added to cart!")
        else:
            print("‚ùå Product validation failed!")

    except Exception as e:
        print("üö® Error validating cart:", e)

except Exception as e:
    print("üö® Unexpected Error:", e)

finally:
    driver.quit()
    print("‚úÖ Browser closed.")
